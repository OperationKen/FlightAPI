package com.skillstorm.data;

import static org.junit.Assert.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Set;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.skillstorm.beans.Flight;

public class FlightDAOTest {

	//Use different schema to test table
	static String url = "jdbc:mysql://localhost:3306/flightapijdbc";
	static String username = "root";
	static String password = "root";
	
	FlightDAO dao = new FlightDAO();
	
	@BeforeClass //create
	public static void beforeTest() throws SQLException {
		try(Connection conn = DriverManager.getConnection(url, username, password)){
			String sql = "create table `flightapijdbc`.`flight` (id INT NOT NULL AUTO_INCREMENT, from_airport VARCHAR(50), to_airport VARCHAR(50), departure VARCHAR(50), arrival VARCHAR(50), flight_number VARCHAR(50), PRIMARY KEY (id) );";
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
			Statement stmt2 = conn.createStatement();
			stmt2.executeUpdate("INSERT INTO flight VALUES(1, 6, 7, 8, 9, 10);");
		}catch(Exception e) {
			fail();
		}
	}
	
	@Test
	public void testCreate() throws SQLException {
		try{
			Connection conn = DriverManager.getConnection(url, username, password);
		    String sql = "select count(*) from flight;";  
			Statement stmt = conn.createStatement();
		    ResultSet rs = stmt.executeQuery(sql);
		    rs.next();
		    FlightDAO.create(new Flight("DFW", "DEN", "2020-05-06", "2020-05-07", "12345-6567"));
		    FlightDAO.create(new Flight("D2W", "DEN", "2020-05-06", "2020-05-07", "12345-6567"));
		    FlightDAO.create(new Flight("D3W", "DEN", "2020-05-06", "2020-05-07", "12345-6567"));
		    ResultSet rs2 = stmt.executeQuery(sql);
		    rs2.next();
		    //Last Row -> Checking if it inserted 3. Table is initially empty, but adding 3 should give us 3 entries.
		    //Column Index 1 = id -> Checking the third id since it is auto-incremented.
		    int lastRow = rs2.getInt(1);
		    assertEquals(lastRow, 4);
		}catch(Exception e) {
			fail();
		}
	}
	
	@Test
	public void testRetrieve() throws SQLException{
		try {
			Connection conn = DriverManager.getConnection(url, username, password);
		    String sql = "select count(*) from flight;";  
			Statement stmt = conn.createStatement();
		    ResultSet rs = stmt.executeQuery(sql);
		    rs.next();
		    int ida = rs.getInt(1);
		    System.out.println(ida);
		    System.out.println(rs);
		    FlightDAO.findByID(4);
		    //assertTrue();
			
		}catch(Exception e) {
			
		}
	}
	
//	@Test
//	public void testDelete() throws SQLException {
//		try {
//			Connection conn = DriverManager.getConnection(url, username, password);
//		    String sql = "select count(*) from flight;";  
//			Statement stmt = conn.createStatement();
//		    ResultSet rs = stmt.executeQuery(sql);
//			int rs211 = rs.getInt(1);
//		    System.out.println(rs211);
//			FlightDAO.delete(2);
//			ResultSet rs2 = stmt.executeQuery(sql);
//			rs2.next();
//			int rs23 = rs2.getInt(1);
//		    System.out.println(rs23);
//
//			assertTrue(rs.next() != true);
//		}catch(Exception e) {
//			
//		}
//	}
	
	@AfterClass //drop
	public static void afterTest() {
//		try(Connection conn = DriverManager.getConnection(url, username, password)){
//			String sql = "DROP TABLE flight";
//			Statement stmt = conn.createStatement();
//			stmt.executeUpdate(sql);
//			conn.close();
//		}catch(Exception e) {
//			fail();
//		}
	}
}
